commit 77b4c945d612f9af3e4598540ea3af9880ff87f7
Author: Javier Ferrer <javi.f.o@gmail.com>
Date:   Wed Oct 8 10:56:48 2014 +0200

    r4p0-00rel0
    
    DX910-SW-99006-r4p0-00rel0

diff --git a/arch_011_udd/ump_arch.c b/arch_011_udd/ump_arch.c
index 9e39022..c30b160 100755
--- a/arch_011_udd/ump_arch.c
+++ b/arch_011_udd/ump_arch.c
@@ -40,7 +40,7 @@ ump_result ump_arch_open(void)
 {
 	ump_result retval = UMP_OK;
 
-	_ump_osu_lock_auto_init( &ump_lock_arch, 0, 0, 0 );
+	_ump_osu_lock_auto_init(&ump_lock_arch, _UMP_OSU_LOCKFLAG_DEFAULT, 0, 0);
 
 	/* Check that the lock was initialized */
 	if (NULL == ump_lock_arch)
@@ -82,7 +82,7 @@ ump_result ump_arch_open(void)
 
 void ump_arch_close(void)
 {
-	_ump_osu_lock_auto_init( &ump_lock_arch, 0, 0, 0 );
+	_ump_osu_lock_auto_init(&ump_lock_arch, _UMP_OSU_LOCKFLAG_DEFAULT, 0, 0);
 
 	/* Check that the lock was initialized */
 	if (NULL == ump_lock_arch)
@@ -99,9 +99,11 @@ void ump_arch_close(void)
 	}
 
 	UMP_DEBUG_ASSERT(0 < ump_ref_count, ("UMP: ump_arch_close() called while no references exist"));
+
 	if (ump_ref_count > 0)
 	{
 		ump_ref_count--;
+
 		if (0 == ump_ref_count)
 		{
 			_ump_osu_errcode_t retval = _ump_uku_close(&ump_uk_ctx);
@@ -134,6 +136,7 @@ ump_secure_id ump_arch_allocate(unsigned long * size, ump_alloc_constraints cons
 	call_arg.secure_id = UMP_INVALID_SECURE_ID;
 	call_arg.size = *size;
 #ifdef UMP_DEBUG_SKIP_CODE
+
 	/** Run-time ASSERTing that _ump_uk_api_version_s and ump_alloc_constraints are
 	 * interchangable */
 	switch (constraints)
@@ -141,13 +144,16 @@ ump_secure_id ump_arch_allocate(unsigned long * size, ump_alloc_constraints cons
 		case UMP_REF_DRV_CONSTRAINT_NONE:
 			UMP_DEBUG_ASSERT(UMP_REF_DRV_UK_CONSTRAINT_NONE == constraints, ("ump_uk_alloc_constraints out of sync with ump_alloc_constraints"));
 			break;
+
 		case UMP_REF_DRV_CONSTRAINT_PHYSICALLY_LINEAR:
 			UMP_DEBUG_ASSERT(UMP_REF_DRV_UK_CONSTRAINT_PHYSICALLY_LINEAR == constraints, ("ump_uk_alloc_constraints out of sync with ump_alloc_constraints"));
 			break;
+
 		default:
 			UMP_DEBUG_ASSERT(1, ("ump_uk_alloc_constraints out of sync with ump_alloc_constraints: %d unrecognized", constraints));
 			break;
 	}
+
 #endif
 	call_arg.constraints = (ump_uk_alloc_constraints)constraints;
 
@@ -237,7 +243,7 @@ void ump_arch_unmap(void* mapping, unsigned long size, unsigned long cookie)
 }
 
 /** Memory synchronization - cache flushing of mapped memory */
-int ump_arch_msync(ump_secure_id secure_id, void* mapping, unsigned long cookie, void * address, unsigned long size,  ump_cpu_msync_op op)
+ump_cache_enabled ump_arch_msync(ump_secure_id secure_id, void *mapping, unsigned long cookie, void *address, unsigned long size,  ump_cpu_msync_op op)
 {
 	_ump_uk_msync_s dd_msync_call_arg;
 
@@ -252,11 +258,13 @@ int ump_arch_msync(ump_secure_id secure_id, void* mapping, unsigned long cookie,
 
 	UMP_DEBUG_PRINT(4, ("Msync 0x%08lx", (unsigned long)mapping));
 	_ump_uku_msynch(&dd_msync_call_arg);
+
 	if (0 == dd_msync_call_arg.is_cached)
 	{
 		UMP_DEBUG_PRINT(4, ("Trying to flush uncached UMP mem ID: %d", secure_id));
 	}
-	return dd_msync_call_arg.is_cached;
+
+	return (ump_cache_enabled)(dd_msync_call_arg.is_cached);
 }
 
 /** Cache operation control. Tell when cache maintenance operations start and end.
diff --git a/arch_011_udd/ump_arch.h b/arch_011_udd/ump_arch.h
index 76bd470..9b1c80f 100755
--- a/arch_011_udd/ump_arch.h
+++ b/arch_011_udd/ump_arch.h
@@ -56,7 +56,7 @@ void ump_arch_unmap(void* mapping, unsigned long size, unsigned long cookie);
 
 /** Memory synchronization - cache flushing of mapped memory
  * @return Is_cached: 1==True 0==NonCached */
-int ump_arch_msync(ump_secure_id secure_id, void* mapping, unsigned long cookie, void * address, unsigned long size,  ump_cpu_msync_op op);
+ump_cache_enabled ump_arch_msync(ump_secure_id secure_id, void *mapping, unsigned long cookie, void *address, unsigned long size,  ump_cpu_msync_op op);
 
 /** Cache operation control. Tell when cache maintenance operations start and end.
 This will allow the kernel to merge cache operations togheter, thus making them faster */
diff --git a/arch_011_udd/ump_frontend.c b/arch_011_udd/ump_frontend.c
index 82ca3eb..3ebcc65 100755
--- a/arch_011_udd/ump_frontend.c
+++ b/arch_011_udd/ump_frontend.c
@@ -56,6 +56,7 @@ UMP_API_EXPORT ump_handle ump_handle_create_from_secure_id(ump_secure_id secure_
 	UMP_DEBUG_ASSERT(UMP_INVALID_SECURE_ID != secure_id, ("Secure ID is invalid"));
 
 	size = ump_arch_size_get(secure_id);
+
 	if (0 != size)
 	{
 		unsigned long cookie;
@@ -65,18 +66,20 @@ UMP_API_EXPORT ump_handle ump_handle_create_from_secure_id(ump_secure_id secure_
 		 * we have supplied incorrect size, so we are safe.
 		 */
 		void *mapping = ump_arch_map(secure_id, size, UMP_CACHE_DISABLE, &cookie);
+
 		if (NULL != mapping)
 		{
 			ump_mem *mem = _ump_osu_calloc(1, sizeof(*mem));
+
 			if (NULL != mem)
 			{
 				mem->secure_id = secure_id;
 				mem->mapped_mem = mapping;
 				mem->size = size;
 				mem->cookie = cookie;
-				mem->is_cached = 1; /* Is set to actually check in the ump_cpu_msync_now() function */
+				mem->is_cached = UMP_CACHE_ENABLE; /* Is set to actually check in the ump_cpu_msync_now() function */
 
-				_ump_osu_lock_auto_init(&mem->ref_lock, 0, 0, 0);
+				_ump_osu_lock_auto_init(&mem->ref_lock, _UMP_OSU_LOCKFLAG_DEFAULT, 0, 0);
 				UMP_DEBUG_ASSERT(NULL != mem->ref_lock, ("Failed to initialize lock\n"));
 				mem->ref_count = 1;
 
@@ -195,6 +198,7 @@ UMP_API_EXPORT void ump_reference_release(ump_handle memh)
 
 	_ump_osu_lock_wait(mem->ref_lock, _UMP_OSU_LOCKMODE_RW);
 	mem->ref_count -= 1;
+
 	if (0 == mem->ref_count)
 	{
 		/* Remove memory mapping, which holds our only reference towards the UMP kernel space driver */
@@ -207,7 +211,9 @@ UMP_API_EXPORT void ump_reference_release(ump_handle memh)
 
 		/* Free the memory for this handle */
 		_ump_osu_free(mem);
-	} else {
+	}
+	else
+	{
 		_ump_osu_lock_signal(mem->ref_lock, _UMP_OSU_LOCKMODE_RW);
 	}
 }
diff --git a/arch_011_udd/ump_ref_drv.c b/arch_011_udd/ump_ref_drv.c
index 3ac8a0d..8762181 100755
--- a/arch_011_udd/ump_ref_drv.c
+++ b/arch_011_udd/ump_ref_drv.c
@@ -36,10 +36,12 @@ static ump_handle ump_ref_drv_allocate_internal(unsigned long size, ump_alloc_co
 ump_handle ump_ref_drv_allocate(unsigned long size, ump_alloc_constraints constraints)
 {
 	ump_cache_enabled cache = UMP_CACHE_DISABLE;
+
 	if (0 != (constraints & UMP_REF_DRV_CONSTRAINT_USE_CACHE))
 	{
 		cache = UMP_CACHE_ENABLE;
 	}
+
 	return ump_ref_drv_allocate_internal(size, constraints, cache);
 }
 
@@ -51,12 +53,16 @@ UMP_API_EXPORT int ump_cpu_msync_now(ump_handle memh, ump_cpu_msync_op op, void*
 
 	/* If the op is readout, we do the readout from DD.
 	   Else we skip flushing if the userspace handle says that it is uncached */
-	if ((UMP_MSYNC_READOUT_CACHE_ENABLED!=op) && (0 == mem->is_cached) ) return 0;
+	if ((UMP_MSYNC_READOUT_CACHE_ENABLED != op) && (0 == mem->is_cached))
+	{
+		return 0;
+	}
 
 	if (NULL == address)
 	{
 		address = ((ump_mem *)mem)->mapped_mem;
 	}
+
 	offset = (int)((unsigned long)address - (unsigned long)((ump_mem *)mem)->mapped_mem);
 
 	if (0 == size)
@@ -129,12 +135,14 @@ static ump_handle ump_ref_drv_allocate_internal(unsigned long size, ump_alloc_co
 	UMP_DEBUG_PRINT(4, ("Allocating UMP memory of size %lu", size));
 
 	secure_id = ump_arch_allocate(&allocated_size, constraints);
+
 	if (secure_id != UMP_INVALID_SECURE_ID)
 	{
 		unsigned long cookie;
 		void *mapping;
 
 		mapping = ump_arch_map(secure_id, allocated_size, cache, &cookie);
+
 		if (NULL != mapping)
 		{
 			/*
@@ -143,15 +151,16 @@ static ump_handle ump_ref_drv_allocate_internal(unsigned long size, ump_alloc_co
 			 */
 			ump_mem *mem;
 			mem = _ump_osu_calloc(1, sizeof(*mem));
+
 			if (NULL != mem)
 			{
 				mem->secure_id = secure_id;
 				mem->mapped_mem = mapping;
 				mem->size = allocated_size;
 				mem->cookie = cookie;
-				mem->is_cached = 1; /* Default to ON, is disabled later if not */
+				mem->is_cached = UMP_CACHE_ENABLE; /* Default to ON, is disabled later if not */
 
-				_ump_osu_lock_auto_init(&mem->ref_lock, 0, 0, 0);
+				_ump_osu_lock_auto_init(&mem->ref_lock, _UMP_OSU_LOCKFLAG_DEFAULT, 0, 0);
 				UMP_DEBUG_ASSERT(NULL != mem->ref_lock, ("Failed to initialize lock\n"));
 				mem->ref_count = 1;
 
diff --git a/include/ump/ump_osu.h b/include/ump/ump_osu.h
index be4c025..dae76c2 100755
--- a/include/ump/ump_osu.h
+++ b/include/ump/ump_osu.h
@@ -25,8 +25,7 @@
 #include <stdarg.h>
 
 #ifdef __cplusplus
-extern "C"
-{
+extern "C" {
 #endif
 
 
diff --git a/include/ump/ump_uk_types.h b/include/ump/ump_uk_types.h
index b623bd8..504166a 100755
--- a/include/ump/ump_uk_types.h
+++ b/include/ump/ump_uk_types.h
@@ -23,8 +23,7 @@
 #define __UMP_UK_TYPES_H__
 
 #ifdef __cplusplus
-extern "C"
-{
+extern "C" {
 #endif
 
 /* Helpers for API version handling */
diff --git a/os/linux/ump_ioctl.h b/os/linux/ump_ioctl.h
index 7746a58..09cc2d5 100755
--- a/os/linux/ump_ioctl.h
+++ b/os/linux/ump_ioctl.h
@@ -18,8 +18,7 @@
 #define __UMP_IOCTL_H__
 
 #ifdef __cplusplus
-extern "C"
-{
+extern "C" {
 #endif
 
 #include <linux/types.h>
diff --git a/os/linux/ump_osu_locks.c b/os/linux/ump_osu_locks.c
index 8997812..8e1c12f 100755
--- a/os/linux/ump_osu_locks.c
+++ b/os/linux/ump_osu_locks.c
@@ -232,6 +232,7 @@ _ump_osu_lock_t *_ump_osu_lock_init( _ump_osu_lock_flags_t flags, u32 initial, u
 			_ump_osu_free(lock);
 			return NULL;
 		}
+
 		lock->state = UMP_FALSE; /* mark as unlocked by default */
 	}
 
@@ -285,13 +286,18 @@ _ump_osu_errcode_t _ump_osu_lock_timed_wait( _ump_osu_lock_t *lock, _ump_osu_loc
 
 	/* lock the mutex protecting access to the state field */
 	pthread_mutex_lock(&lock->mutex);
+
 	/* loop while locked (state is UMP_TRUE) */
 	/* pthread_cond_timedwait unlocks the mutex, wait, and locks the mutex once unblocked (either due to the event or the timeout) */
 	while (UMP_TRUE == lock->state)
 	{
 		int res;
 		res = pthread_cond_timedwait(&lock->condition, &lock->mutex, &ts);
-		if (0 == res) continue; /* test the state variable again (loop condition) */
+
+		if (0 == res)
+		{
+			continue;    /* test the state variable again (loop condition) */
+		}
 		else if (ETIMEDOUT == res)
 		{
 			/* timeout, need to clean up and return the correct error code */
@@ -336,7 +342,7 @@ _ump_osu_errcode_t _ump_osu_lock_wait( _ump_osu_lock_t *lock, _ump_osu_lock_mode
 	switch (lock->flags)
 	{
 		case _UMP_OSU_LOCKFLAG_STATIC:
-	case 0:
+		case _UMP_OSU_LOCKFLAG_DEFAULT:
 			/* Usual Mutex type */
 		{
 			int call_result;
@@ -358,9 +364,13 @@ _ump_osu_errcode_t _ump_osu_lock_wait( _ump_osu_lock_t *lock, _ump_osu_lock_mode
 
 			/* lock the mutex protecting access to the state field */
 			pthread_mutex_lock(&lock->mutex);
+
 			/* loop while locked (state is UMP_TRUE) */
 			/* pthread_cond_wait unlocks the mutex, wait, and locks the mutex once unblocked */
-		while ( UMP_TRUE == lock->state ) pthread_cond_wait( &lock->condition, &lock->mutex );
+			while (UMP_TRUE == lock->state)
+			{
+				pthread_cond_wait(&lock->condition, &lock->mutex);
+			}
 
 			/* DEBUG tracking of previously locked state - occurs while lock is obtained */
 			UMP_DEBUG_ASSERT(_UMP_OSU_LOCKMODE_UNDEF == lock->locked_as,
@@ -396,7 +406,7 @@ _ump_osu_errcode_t _ump_osu_lock_trywait( _ump_osu_lock_t *lock, _ump_osu_lock_m
 	switch (lock->flags)
 	{
 		case _UMP_OSU_LOCKFLAG_STATIC:
-	case 0:
+		case _UMP_OSU_LOCKFLAG_DEFAULT:
 			/* Usual Mutex type */
 		{
 			/* This is not subject to UMP_CHECK - overriding the result would cause a programming error */
@@ -463,7 +473,7 @@ void _ump_osu_lock_signal( _ump_osu_lock_t *lock, _ump_osu_lock_mode_t mode )
 	switch (lock->flags)
 	{
 		case _UMP_OSU_LOCKFLAG_STATIC:
-	case 0:
+		case _UMP_OSU_LOCKFLAG_DEFAULT:
 			/* Usual Mutex type */
 
 			/* DEBUG tracking of previously locked state - occurs while lock is obtained */
diff --git a/os/linux/ump_uku.c b/os/linux/ump_uku.c
index 03815ab..675f0f2 100755
--- a/os/linux/ump_uku.c
+++ b/os/linux/ump_uku.c
@@ -46,6 +46,7 @@ static const char ump_device_file_name[] = "/dev/ump";
 _ump_osu_errcode_t _ump_uku_open(void **context)
 {
 	int ump_device_file;
+
 	if (NULL == context)
 	{
 		return _UMP_OSU_ERR_FAULT;
@@ -64,6 +65,7 @@ _ump_osu_errcode_t _ump_uku_open( void **context )
 		args.version = UMP_IOCTL_API_VERSION;
 		args.compatible = 3;
 		ump_driver_ioctl(args.ctx, UMP_IOC_QUERY_API_VERSION, &args);
+
 		if (1 != args.compatible)
 		{
 			if (IS_API_MATCH(MAKE_VERSION_ID(1), args.version))
@@ -124,12 +126,15 @@ void _ump_uku_msynch(_ump_uk_msync_s *args)
 	if (MAKE_VERSION_ID(1) == ump_ioctl_api_version_used)
 	{
 		args->is_cached = 0;
+
 		if (_UMP_UK_MSYNC_READOUT_CACHE_ENABLED != args->op)
 		{
 			UMP_DEBUG_PRINT(3, ("Warning: Doing UMP cache flush operations on a Device Driver that does not support cached UMP mem.\n"));
 		}
+
 		return;
 	}
+
 	ump_driver_ioctl(args->ctx, UMP_IOC_MSYNC, args);
 }
 
@@ -156,6 +161,7 @@ void _ump_uku_unlock( _ump_uk_unlock_s *args )
 int _ump_uku_map_mem(_ump_uk_map_mem_s *args)
 {
 	int flags;
+
 	if (-1 == (int)args->ctx)
 	{
 		return -1;
@@ -171,9 +177,13 @@ int _ump_uku_map_mem(_ump_uk_map_mem_s *args)
 
 	/* If we want the Caching to be enabled we set the flags to be PRIVATE. The UMP DD reads this and do proper handling
 	   Note: this enforces the user to use proper invalidation*/
-	if ( args->is_cached ) flags = MAP_PRIVATE;
+	if (args->is_cached)
+	{
+		flags = MAP_PRIVATE;
+	}
 
 	args->mapping = mmap(NULL, args->size, PROT_READ | PROT_WRITE , flags , (int)args->ctx, (off_t)args->secure_id * sysconf(_SC_PAGE_SIZE));
+
 	if (MAP_FAILED == args->mapping)
 	{
 		return -1;
@@ -208,6 +218,10 @@ static _ump_osu_errcode_t ump_driver_ioctl(void *context, u32 command, void *arg
 	}
 
 	/* call ioctl handler of driver */
-	if (0 != ioctl((int)context, command, args)) return -1;
+	if (0 != ioctl((int)context, command, args))
+	{
+		return _UMP_OSU_ERR_FAULT;
+	}
+
 	return _UMP_OSU_ERR_OK;
 }
diff --git a/os/ump_uku.h b/os/ump_uku.h
index 9267e1d..24b889f 100755
--- a/os/ump_uku.h
+++ b/os/ump_uku.h
@@ -27,8 +27,7 @@
 #include <ump/ump_uk_types.h>
 
 #ifdef __cplusplus
-extern "C"
-{
+extern "C" {
 #endif
 
 _ump_osu_errcode_t _ump_uku_open(void **context);
diff --git a/readme.txt b/readme.txt
index d4e03d5..0017936 100755
--- a/readme.txt
+++ b/readme.txt
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2011, 2013 ARM Limited. All rights reserved.
+ * Copyright (C) 2011 ARM Limited. All rights reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/ump.mak b/ump.mak
index b57365b..e417313 100755
--- a/ump.mak
+++ b/ump.mak
@@ -1,5 +1,5 @@
 #
-# Copyright (C) 2011, 2013 ARM Limited. All rights reserved.
+# Copyright (C) 2011 ARM Limited. All rights reserved.
 # 
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
